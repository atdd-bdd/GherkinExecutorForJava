package gherkinexecutor.Feature_Examples;
import java.util.*;
import java.net.URL;
import java.util.regex.Pattern;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.List;
import java.io.FileWriter;
import java.io.IOException;

class Feature_Examples_glue {
void log(String value) {
    try {
        FileWriter myLog = new FileWriter("src/test/java/gherkinexecutor/Feature_Examples/log.txt", true);
        myLog.write(value + "\n");
        myLog.close();
    } catch (IOException e) {
    System.err.println("*** Cannot write to log ");
    }
    }


    void Calculation_Convert_F_to_C(List<TemperatureCalculation> values ) {
        System.out.println("---  " + "Calculation_Convert_F_to_C");
        log("---  " + "Calculation_Convert_F_to_C");
        log(values.toString());
        for (TemperatureCalculation value : values){
           System.out.println(value);
                try {
                TemperatureCalculationInternal i = value.toTemperatureCalculationInternal();
                  System.out.println(i);
                      }
                     catch(Exception e){
                         System.err.println("Argument Error " + value.toString() + TemperatureCalculationInternal.toDataTypeString());
                         }
              }
    }

    void Rule_ID_must_have_exactly_5_letters_and_begin_with_Q(List<DomainTermID> values ) {
        System.out.println("---  " + "Rule_ID_must_have_exactly_5_letters_and_begin_with_Q");
        log("---  " + "Rule_ID_must_have_exactly_5_letters_and_begin_with_Q");
        log(values.toString());
        for (DomainTermID value : values){
           System.out.println(value);
                try {
                DomainTermIDInternal i = value.toDomainTermIDInternal();
                  System.out.println(i);
                      }
                     catch(Exception e){
                         System.err.println("Argument Error " + value.toString() + DomainTermIDInternal.toDataTypeString());
                         }
              }
    }

    void Given_list_of_numbers(List<LabelValue> values ) {
        System.out.println("---  " + "Given_list_of_numbers");
        log("---  " + "Given_list_of_numbers");
        log(values.toString());
        for (LabelValue value : values){
           System.out.println(value);
                try {
                LabelValueInternal i = value.toLabelValueInternal();
                  System.out.println(i);
                      }
                     catch(Exception e){
                         System.err.println("Argument Error " + value.toString() + LabelValueInternal.toDataTypeString());
                         }
              }
    }

    void When_filtered_by_Label_with_value(List<List<String>> values ) {
        System.out.println("---  " + "When_filtered_by_Label_with_value");
        log("---  " + "When_filtered_by_Label_with_value");
        log(values.toString());
        for (List<String> value : values){
           System.out.println(value);
              }
    }

    void Then_sum_is(List<List<String>> values ) {
        System.out.println("---  " + "Then_sum_is");
        log("---  " + "Then_sum_is");
        log(values.toString());
        for (List<String> value : values){
           System.out.println(value);
              }
    }

    }
