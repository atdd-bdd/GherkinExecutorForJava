package gherkinexecutor.Feature_Tables_and_Strings;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;

class Feature_Tables_and_Strings_glue {
    final String DNCString = "?DNC?";


    void Star_A_multiline_string_to_a_string(String value ) {
        System.out.println("---  " + "Star_A_multiline_string_to_a_string");
        System.out.println(value);
    }

    void Star_A_multiline_string_to_a_List_of_String(List<String> values ) {
        System.out.println("---  " + "Star_A_multiline_string_to_a_List_of_String");
        for (String value : values){
            System.out.println(value);
            // Add calls to production code and asserts
        }
    }

    String originalString;
    void Given_multiline_string(String value ) {
        System.out.println("---  " + "Given_multiline_string");
        System.out.println(value);
        originalString = value;
    }

    void Then_should_be_equal_to_this_list(List<String> values ) {
        System.out.println("---  " + "Then_should_be_equal_to_this_list");
        String result = "";
        for (String value : values){
            System.out.println(value);
            result += value + "\n";
            // Add calls to production code and asserts
        }
        assertEquals(originalString, result);
    }

    void Star_A_table_to_List_of_List_of_String(List<List<String>> values ) {
        System.out.println("---  " + "Star_A_table_to_List_of_List_of_String");
        for (List<String> value : values){
            System.out.println(value);
            // Add calls to production code and asserts
        }
    }

    void Star_A_Table_to_List_Of_List_Of_Object(List<List<String>> values ) {
        List<List<Integer>> is = convertList(values);
        System.out.println(is);
        assertEquals(1, is.get(0).get(0));
    }

    void Star_A_table_to_List_of_Object(List<ExampleClass> values ) {
        System.out.println("---  " + "Star_A_table_to_List_of_Object");
        for (ExampleClass value : values){
            System.out.println(value);
            // Add calls to production code and asserts
        }
     }

    void Star_A_table_to_List_of_Object_with_Defaults(List<ExampleClass> values ) {
        System.out.println("---  " + "Star_A_table_to_List_of_Object_with_Defaults");
        for (ExampleClass value : values){
            System.out.println(value);
        }
    }

    void Star_A_table_to_List_of_Object_with_Blanks_in_Values(List<ExampleClassWithBlanks> values ) {
        System.out.println("---  " + "Star_A_table_to_List_of_Object_with_Blanks_in_Values");
        for (ExampleClassWithBlanks value : values){
            System.out.println(value);
        }
    }

    void Star_A_table_to_List_of_Object_with_Blanks_in_Defaults(List<ExampleClassWithBlanks> values ) {
        System.out.println("---  " + "Star_A_table_to_List_of_Object_with_Blanks_in_Defaults");
        for (ExampleClassWithBlanks value : values){
            System.out.println(value);
        }
    }

    void Star_A_table_to_String(String value ) {
        System.out.println("---  " + "Star_A_table_to_String");
        System.out.println(value);
    }


    void Given_A_table_to_String(String value ) {
        System.out.println("---  " + "Given_A_table_to_String");
        System.out.println(value);
        originalString = value;
    }

    void Then_string_should_be_same_as(String value ) {
        System.out.println("---  " + "Then_string_should_be_same_as");
        System.out.println(value);
        assertEquals(originalString,value);
    }

    List<ExampleClass> originalTable;
    void Given_A_table_to_List_of_Object_with_Defaults(List<ExampleClass> values ) {
        System.out.println("---  " + "Given_A_table_to_List_of_Object_with_Defaults");
        for (ExampleClass value : values){
            System.out.println(value);
       }
       originalTable = values;
    }

    void Then_table_should_be_same_as(List<ExampleClass> values ) {
        System.out.println("---  " + "Then_table_should_be_same_as");
        for (ExampleClass value : values){
            System.out.println(value);
            // Add calls to production code and asserts
        }
        assertEquals(originalTable, values);
    }

    void Given_A_table_to_List_of_Object(List<ExampleClass> values ) {
        System.out.println("---  " + "Given_A_table_to_List_of_Object");
        for (ExampleClass value : values){
            System.out.println(value);
            // Add calls to production code and asserts
        }
        originalTable = values;
    }

    void Then_transposed_table_to_List_of_Object_should_be_the_same(List<ExampleClass> values ) {
        System.out.println("---  " + "Then_transposed_table_to_List_of_Object_should_be_the_same");
        for (ExampleClass value : values){
            System.out.println(value);
            // Add calls to production code and asserts
        }
       assertEquals(originalTable, values);
    }

    public static List<List<Integer>> convertList(List<List<String>> stringList) {
        List<List<Integer>> classList = new ArrayList<>();
        for (List<String> innerList : stringList) {
            List<Integer> innerClassList = new ArrayList<>();
            for (String s : innerList) {
                innerClassList.add(Integer.valueOf(s));
            }
            classList.add(innerClassList);
        }
        return classList;
    }

}
